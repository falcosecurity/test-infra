#!/usr/bin/env bash
# set -xe

DRIVER_NAME="falco"
PROBE_NAME="falco"

CURRENT_DIR="$(pwd)"

DEFAULT_KERNEL_VERSION="1"

while getopts ":a:k:d:v:h:" arg; do
  case $arg in
    a)
      TARGET_ARCH=${OPTARG}
      ;;
    k)
      TARGET_KERNEL=${OPTARG}
      ;;
    d)
      TARGET_DISTRO=${OPTARG}
      ;;
    v)
      TARGET_VERSION=${OPTARG}
      ;;
    h)
      TARGET_HEADERS=${OPTARG}
      ;;
  esac
done


if [ -z ${TARGET_ARCH} ]; then
    echo "TARGET_ARCH can't be empty"
    exit 1
fi
if [ -z ${TARGET_DISTRO} ]; then
    echo "TARGET_DISTRO can't be empty"
    exit 1
fi
if [ -z ${TARGET_KERNEL} ]; then
    echo "TARGET_KERNEL can't be empty"
    exit 1
fi
if [ -z ${TARGET_VERSION} ]; then
    echo "TARGET_VERSION can't be empty"
    exit 1
fi

ensure_kernelversion() {
    TARGET_KERNEL_VERSION="$(expr match "${TARGET_KERNEL}" '^.*_\(.*\)$')"

    # If kernel version is missing
    test -z $TARGET_KERNEL_VERSION &&\
	    TARGET_KERNEL_VERSION=$DEFAULT_KERNEL_VERSION &&\
	    TARGET_KERNEL="${TARGET_KERNEL}_${TARGET_KERNEL_VERSION}"
}

ensure_kernelrelease() {
    TARGET_KERNEL_RELEASE="${TARGET_KERNEL%_${TARGET_KERNEL_VERSION}}"
}

arch_to_driverkit_arch() {
	case "$1" in
		"x86_64")
			echo -n "amd64"
			;;
		"aarch64")
			echo -n "arm64"
			;;
		*)
			echo "unknown architecture"
			exit 1
			;;
	esac
}

# If driver version is a semver, we are in the newest case
# thus we must support %arch/ subfolder for configs.
# Else, we are in the old case, and we only support x86_64 configs
# in the TARGET_VERSION folder.
# TODO: rm this once old format support is dropped, and always use ${TARGET_VERSION}/${TARGET_ARCH}
function path_from_version() {
  SEMVER_REGEX="^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"
  if [[ $TARGET_VERSION =~ $SEMVER_REGEX ]]; then
    # valid semver
    echo -n "${TARGET_VERSION}/${TARGET_ARCH}"
  else
    # not valid (old versions)
    echo -n "${TARGET_VERSION}"
  fi
}

generate_yamls() {
    FOLDER="${CURRENT_DIR}/../driverkit/config/$(path_from_version)"
    mkdir -p ${FOLDER}
    FILE="${FOLDER}/${TARGET_DISTRO}_${TARGET_KERNEL}.yaml"
    echo "---"
    echo "${FILE}"
    echo "---"
    echo "kernelversion: ${TARGET_KERNEL_VERSION}"
    echo "kernelrelease: ${TARGET_KERNEL_RELEASE}"
    echo "target: ${TARGET_DISTRO}"
    echo "architecture: $(arch_to_driverkit_arch ${TARGET_ARCH})"
    echo "output:"
    echo "  module: output/$(path_from_version)/${DRIVER_NAME}_${TARGET_DISTRO}_${TARGET_KERNEL}.ko"
    echo "  probe: output/$(path_from_version)/${PROBE_NAME}_${TARGET_DISTRO}_${TARGET_KERNEL}.o"
    if [[ -n "${TARGET_HEADERS}" ]]; then
        echo "kernelurls: ${TARGET_HEADERS}"
    fi
    
    echo "kernelversion: ${TARGET_KERNEL_VERSION}" > ${FILE}
    echo "kernelrelease: ${TARGET_KERNEL_RELEASE}" >> ${FILE}
    echo "target: ${TARGET_DISTRO}" >> ${FILE}
    echo "architecture: $(arch_to_driverkit_arch ${TARGET_ARCH})" >> ${FILE}
    echo "output:" >> ${FILE}
    echo "  module: output/$(path_from_version)/${DRIVER_NAME}_${TARGET_DISTRO}_${TARGET_KERNEL}.ko" >> ${FILE}
    echo "  probe: output/$(path_from_version)/${PROBE_NAME}_${TARGET_DISTRO}_${TARGET_KERNEL}.o" >> ${FILE}
    if [[ -n "${TARGET_HEADERS}" ]]; then
        echo "kernelurls: ${TARGET_HEADERS}" >> ${FILE}
    fi   
}

ensure_kernelversion
ensure_kernelrelease
generate_yamls
