#!/usr/bin/env bash
# shellcheck disable=SC1090

currentdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "${currentdir}/parseyaml"

input="$1"
filename="${input##*/}"

# TODO: rm once old format support is dropped; just use arch="${input_parts[2]}"
function get_arch_from_path() {
    # Check if arch subdir exists
    IFS=/ read -a input_parts <<< ${1}
    if [[ ${#input_parts[@]} -eq 4 ]]; then
        arch="${input_parts[2]}/"
    else
        arch=""
    fi
    echo -n "${arch}"
}

arch="$(get_arch_from_path ${input})"

target=
kernelrelease=
kernelversion=
output_module=
output_probe=
create_variables "$input"

expected_filename="${target}_${kernelrelease}_${kernelversion}.yaml"

# Check whether the config filename follows the convention otherwise exit
if [ "$filename" != "${expected_filename}" ]; then
    >&2 echo "config filename is wrong (${1})"
    >&2 echo "It should be ${expected_filename}"
    >&2 echo "target:		$target"
    >&2 echo "kernelrelease:	$kernelrelease"
    >&2 echo "kernelversion:	$kernelversion"
    exit 1
fi

# Check whether the eBPF probe filename follows the convention otherwise exit
if [ -n "${output_probe}" ]; then
    output_probe_filename="${output_probe##*/}"
    if [ "${output_probe_filename}" != "falco_${target}_${kernelrelease}_${kernelversion}.o" ]; then
        >&2 echo "output probe filename is wrong (${1}); expected: falco_${target}_${kernelrelease}_${kernelversion}.o, has ${output_probe_filename}"
        exit 1
    fi

    # TODO: rm this external check once old format support is dropped (and we always have an arch)
    if [[ -n "${arch}" ]]; then
        if [ "${arch}" != "$(get_arch_from_path ${output_probe})" ]; then
            >&2 echo "output probe filename has wrong architecture in its config path (${1}); expected $(get_arch_from_path ${output_probe}), has ${arch}"
            exit 1
        fi
    fi
fi

# Check whether the kernel module filename follows the convention otherwise exit
if [ -n "${output_module}" ]; then
    output_module_filename="${output_module##*/}"
    if [ "${output_module_filename}" != "falco_${target}_${kernelrelease}_${kernelversion}.ko" ]; then
        >&2 echo "output module filename is wrong (${1}); expected falco_${target}_${kernelrelease}_${kernelversion}.ko, has ${output_module_filename}"
        exit 1
    fi

    # TODO: rm this external check once old format support is dropped (and we always have an arch)
    if [[ -n "${arch}" ]]; then
        if [ "${arch}" != "$(get_arch_from_path ${output_module})" ]; then
             >&2 echo "output module filename has wrong architecture in its config path (${1}); expected $(get_arch_from_path ${output_module}), has ${arch}"
             exit 1
        fi
    fi
fi
