---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: tide
spec:
  selector:
    app: tide
  ports:
  - port: 80
    targetPort: 8888
  type: NodePort
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: "tide"
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: "tide"
rules:
  - apiGroups:
      - "prow.k8s.io"
    resources:
      - prowjobs
    verbs:
      - create
      - list
      - watch
      - get
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: "tide"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "tide"
subjects:
- kind: ServiceAccount
  name: "tide"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: tide
  labels:
    app: tide
spec:
  replicas: 1 # Do not scale up.
  selector:
    matchLabels:
      app: tide
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: tide
    spec:
      serviceAccountName: "tide"
      containers:
      - name: tide
        image: gcr.io/k8s-prow/tide:v20191202-824584dd0
        args:
        - --dry-run=false
        - --config-path=/etc/config/configs.yaml
        # todo > use ghproxy (https://github.com/kubernetes/test-infra/master/ghproxy) to cache GitHub API requests
        # - --github-endpoint=http://ghproxy
        # - --github-endpoint=https://api.github.com
        ports:
          - name: http
            containerPort: 8888
        volumeMounts:
        - name: oauth
          mountPath: /etc/github
          readOnly: true
        - name: configs
          mountPath: /etc/config
          readOnly: true
      volumes:
      - name: oauth
        secret:
          secretName: oauth-token
      - name: configs
        configMap:
          name: configs
